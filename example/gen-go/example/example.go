// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package example

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Reqcode
//  - Reqvalue
type ExampleReq struct {
  Reqcode int32 `thrift:"reqcode,1" db:"reqcode" json:"reqcode"`
  Reqvalue string `thrift:"reqvalue,2" db:"reqvalue" json:"reqvalue"`
}

func NewExampleReq() *ExampleReq {
  return &ExampleReq{}
}


func (p *ExampleReq) GetReqcode() int32 {
  return p.Reqcode
}

func (p *ExampleReq) GetReqvalue() string {
  return p.Reqvalue
}
func (p *ExampleReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExampleReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Reqcode = v
}
  return nil
}

func (p *ExampleReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Reqvalue = v
}
  return nil
}

func (p *ExampleReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("example_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExampleReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqcode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqcode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Reqcode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqcode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqcode: ", p), err) }
  return err
}

func (p *ExampleReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqvalue", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reqvalue: ", p), err) }
  if err := oprot.WriteString(string(p.Reqvalue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqvalue (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reqvalue: ", p), err) }
  return err
}

func (p *ExampleReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExampleReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resvalue
type ExampleRes struct {
  Rescode int32 `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resvalue string `thrift:"resvalue,2" db:"resvalue" json:"resvalue"`
}

func NewExampleRes() *ExampleRes {
  return &ExampleRes{}
}


func (p *ExampleRes) GetRescode() int32 {
  return p.Rescode
}

func (p *ExampleRes) GetResvalue() string {
  return p.Resvalue
}
func (p *ExampleRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExampleRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Rescode = v
}
  return nil
}

func (p *ExampleRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resvalue = v
}
  return nil
}

func (p *ExampleRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("example_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExampleRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *ExampleRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resvalue", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resvalue: ", p), err) }
  if err := oprot.WriteString(string(p.Resvalue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resvalue (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resvalue: ", p), err) }
  return err
}

func (p *ExampleRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExampleRes(%+v)", *p)
}

type ExampleService interface {
  // Parameters:
  //  - Req
  GetResponse(ctx context.Context, req *ExampleReq) (r *ExampleRes, err error)
}

type ExampleServiceClient struct {
  c thrift.TClient
}

func NewExampleServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ExampleServiceClient {
  return &ExampleServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewExampleServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ExampleServiceClient {
  return &ExampleServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewExampleServiceClient(c thrift.TClient) *ExampleServiceClient {
  return &ExampleServiceClient{
    c: c,
  }
}

func (p *ExampleServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Req
func (p *ExampleServiceClient) GetResponse(ctx context.Context, req *ExampleReq) (r *ExampleRes, err error) {
  var _args0 ExampleServiceGetResponseArgs
  _args0.Req = req
  var _result1 ExampleServiceGetResponseResult
  if err = p.Client_().Call(ctx, "get_response", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

type ExampleServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ExampleService
}

func (p *ExampleServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ExampleServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ExampleServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewExampleServiceProcessor(handler ExampleService) *ExampleServiceProcessor {

  self2 := &ExampleServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["get_response"] = &exampleServiceProcessorGetResponse{handler:handler}
return self2
}

func (p *ExampleServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x3

}

type exampleServiceProcessorGetResponse struct {
  handler ExampleService
}

func (p *exampleServiceProcessorGetResponse) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ExampleServiceGetResponseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_response", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ExampleServiceGetResponseResult{}
var retval *ExampleRes
  var err2 error
  if retval, err2 = p.handler.GetResponse(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_response: " + err2.Error())
    oprot.WriteMessageBegin("get_response", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_response", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type ExampleServiceGetResponseArgs struct {
  Req *ExampleReq `thrift:"req,1" db:"req" json:"req"`
}

func NewExampleServiceGetResponseArgs() *ExampleServiceGetResponseArgs {
  return &ExampleServiceGetResponseArgs{}
}

var ExampleServiceGetResponseArgs_Req_DEFAULT *ExampleReq
func (p *ExampleServiceGetResponseArgs) GetReq() *ExampleReq {
  if !p.IsSetReq() {
    return ExampleServiceGetResponseArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ExampleServiceGetResponseArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ExampleServiceGetResponseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExampleServiceGetResponseArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &ExampleReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ExampleServiceGetResponseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_response_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExampleServiceGetResponseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ExampleServiceGetResponseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExampleServiceGetResponseArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ExampleServiceGetResponseResult struct {
  Success *ExampleRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewExampleServiceGetResponseResult() *ExampleServiceGetResponseResult {
  return &ExampleServiceGetResponseResult{}
}

var ExampleServiceGetResponseResult_Success_DEFAULT *ExampleRes
func (p *ExampleServiceGetResponseResult) GetSuccess() *ExampleRes {
  if !p.IsSetSuccess() {
    return ExampleServiceGetResponseResult_Success_DEFAULT
  }
return p.Success
}
func (p *ExampleServiceGetResponseResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ExampleServiceGetResponseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExampleServiceGetResponseResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ExampleRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ExampleServiceGetResponseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_response_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExampleServiceGetResponseResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ExampleServiceGetResponseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExampleServiceGetResponseResult(%+v)", *p)
}


